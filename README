################################################################################
#
#  README file for the Torus code (light version)
#
# If there are issues, contact Paul McMillan <paul@astro.lu.se>
#
################################################################################

This is the lite version of the Torus code. It excludes the
functionality to save fitted tori, and the ability to use Walter
Dehnen's Galactic Potential code. It has a minimal license.

Everything _should_ compile with simply the command "make". This will compile: 

1) obj/libWD.a, comprising general library code from Walter Dehnen.

2) obj/libOther.a, comprising my general library code. It include
PJMCoords which converts between various coordinate sytems (Galactocentric and
Heliocentric). 

3) obj/libPot.a, comprising code that works out various potentials (and
derivatives etc). This DOES NOT INCLUDE falPot, Dehnen's Galaxy Potential
code. 

4) obj/libTorus.a, comprising the various bits of underlying Torus code
(that work out the parameters of a Torus model, and do all the work converting
between coordinate systems). The key class is Torus (as you might expect), which
collects everything together. 

5) Example executables (in bin).

The inputs required for any piece of example code can be found by running it
with no arguments. The various executables are:

AUTOTORI: Finds a many tori given input potential and list of Actions.

AUTOTORUS: Finds a torus given input potential and Actions

Choose_any_df: Picks actions randomly from a given df using a Metropolis
algorithm. Output is a list of actions, df values, and number of steps that the
MCMC chain stayed at that action (N_MCMC).

Orbit_basic: Takes input positions and velocities (in the same
coordinates as the output from Sample_list_limits). Integrates their
orbits in given potential, giving output at up to 5 times given by
user.

Coord_converter: Converts input points into different coordiate
systems (Galactocentric or Heliocentric). 

CompareTorusIntegrated compares orbits found from a torus model to
those found by integrating the equations of motion.

CompareTorusIntegrated_SOS compares surfaces of section at z=0 from a
torus models and from integrated orbits.

SmoothStreamMaker gives positions and velocities of stars in a stream
assuming a simple model for stream formation.
